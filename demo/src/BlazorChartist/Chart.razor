@inject IJSRuntime JS

<div @ref="elem" class="@AspectRatio.ToCssClass()">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public ChartType Type { get; set; } = ChartType.Line;

    [Parameter] public AspectRatio? AspectRatio { get; set; }

    [Parameter] public IEnumerable<string> Labels { get; set; }

    private ElementReference elem;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("BlazorChartist.createChart", new
            {
                Elem = elem,
                Type = Type.ToString(),
                Labels
            });
        }
    }

    internal async Task AddSeriesAsync<TData>(string id, IEnumerable<TData> values)
    {
        await JS.InvokeVoidAsync("BlazorChartist.addSeries", elem, id, values);
    }

    internal async Task RemoveSeriesAsync(string id)
    {
        await JS.InvokeVoidAsync("BlazorChartist.removeSeries", elem, id);
    }
}
